import { isFunction } from '../../isFunction'

describe('isFunction', () => {
    it('should return true if value is a function', () => {
        expect(isFunction(() => {})).toBe(true)
        expect(isFunction(function () {})).toBe(true)
        expect(isFunction(async () => {})).toBe(true)
        expect(isFunction(async function () {})).toBe(true)
        expect(isFunction(function* () {})).toBe(true)
        expect(isFunction(async function* () {})).toBe(true)
    })
    it('should return false if value is not a function', () => {
        expect(isFunction(undefined)).toBe(false)
        expect(isFunction(null)).toBe(false)
        expect(isFunction('')).toBe(false)
        expect(isFunction('abc')).toBe(false)
        expect(isFunction(false)).toBe(false)
        expect(isFunction(true)).toBe(false)
        expect(isFunction(0)).toBe(false)
        expect(isFunction(-1)).toBe(false)
        expect(isFunction(1)).toBe(false)
        expect(isFunction(NaN)).toBe(false)
        expect(isFunction(Infinity)).toBe(false)
        expect(isFunction(-Infinity)).toBe(false)
        expect(isFunction({})).toBe(false)
        expect(isFunction([])).toBe(false)
        expect(isFunction(new Date())).toBe(false)
        expect(isFunction(/abc/)).toBe(false)
        expect(isFunction(new RegExp('abc'))).toBe(false)
        expect(isFunction(Symbol('abc'))).toBe(false)
        expect(isFunction(new Error())).toBe(false)
        expect(isFunction(new TypeError())).toBe(false)
    })
})
