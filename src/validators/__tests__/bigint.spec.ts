import { NumberRules } from '../rules/Number'
import { bigint } from '../schema/bigint'

describe('bigint', () => {
    it('should validate a bigint', () => {
        const schema = bigint()
        expect(schema(BigInt(0))).toBe(true)
        expect(schema(BigInt(1))).toBe(true)
        expect(schema(BigInt(2))).toBe(true)
        expect(schema(BigInt(3))).toBe(true)
        expect(schema(BigInt(4))).toBe(true)
        expect(schema(BigInt(5))).toBe(true)
        expect(schema(BigInt(6))).toBe(true)
        expect(schema(BigInt(7))).toBe(true)
        expect(schema(BigInt(8))).toBe(true)
        expect(schema(BigInt(9))).toBe(true)
        expect(schema(BigInt(10))).toBe(true)
        expect(schema(BigInt(11))).toBe(true)
        expect(schema(BigInt(12))).toBe(true)
        expect(schema(BigInt(13))).toBe(true)
        expect(schema(BigInt(14))).toBe(true)
        expect(schema(BigInt(15))).toBe(true)
        expect(schema(BigInt(16))).toBe(true)
        expect(schema(BigInt(17))).toBe(true)
        expect(schema(BigInt(18))).toBe(true)
        expect(schema(BigInt(19))).toBe(true)
        expect(schema(BigInt(20))).toBe(true)
        expect(schema(BigInt(21))).toBe(true)
        expect(schema(BigInt(22))).toBe(true)
        expect(schema(BigInt(23))).toBe(true)
        expect(schema(BigInt(24))).toBe(true)
        expect(schema(BigInt(25))).toBe(true)
        expect(schema(BigInt(26))).toBe(true)
        expect(schema(BigInt(27))).toBe(true)
        expect(schema(BigInt(28))).toBe(true)
        expect(schema(BigInt(29))).toBe(true)
        expect(schema(BigInt(30))).toBe(true)
        expect(schema(BigInt(31))).toBe(true)
        expect(schema(BigInt(32))).toBe(true)
        expect(schema(BigInt(33))).toBe(true)
        expect(schema(BigInt(34))).toBe(true)
        expect(schema(BigInt(35))).toBe(true)
        expect(schema(BigInt(36))).toBe(true)
        expect(schema(BigInt(37))).toBe(true)
        expect(schema(BigInt(38))).toBe(true)
        expect(schema(BigInt(39))).toBe(true)
        expect(schema(BigInt(40))).toBe(true)
        expect(
            schema(
                BigInt('10000000000000544654654654646547065048465489764808046804860468047840807807')
            )
        ).toBe(true)
        expect(
            schema(
                BigInt('10000000000000544654654654646547065048465489764808046804860468047840807808')
            )
        ).toBe(true)

        expect(schema(0)).toBe(false)
        expect(schema(1)).toBe(false)
        expect(schema('97')).toBe(false)
        expect(schema(true)).toBe(false)
        expect(schema(false)).toBe(false)
        expect(schema(Symbol())).toBe(false)
        expect(schema(null)).toBe(false)
        expect(schema(undefined)).toBe(false)
        expect(schema({})).toBe(false)
        expect(schema([])).toBe(false)
        expect(schema(() => void 0)).toBe(false)
        expect(
            schema(function () {
                void 0
            })
        ).toBe(false)
        expect(schema(class {})).toBe(false)
        expect(schema(new Date())).toBe(false)
        expect(schema(/a/)).toBe(false)
        expect(schema(new RegExp('a'))).toBe(false)
        expect(schema(new Error())).toBe(false)
        expect(schema(new Map())).toBe(false)
        expect(schema(new Set())).toBe(false)
        expect(schema(new WeakMap())).toBe(false)
        expect(schema(new WeakSet())).toBe(false)
        expect(schema(new ArrayBuffer(2))).toBe(false)
        expect(schema(new Int8Array())).toBe(false)
        expect(schema(new Uint8Array())).toBe(false)
        expect(schema(new Uint8ClampedArray())).toBe(false)
        expect(schema(new Int16Array())).toBe(false)
        expect(schema(new Uint16Array())).toBe(false)
        expect(schema(new Int32Array())).toBe(false)
        expect(schema(new Uint32Array())).toBe(false)
        expect(schema(new Float32Array())).toBe(false)
        expect(schema(new Float64Array())).toBe(false)
        expect(schema(new BigInt64Array())).toBe(false)
        expect(schema(new BigUint64Array())).toBe(false)
        expect(schema(new Promise(() => void 0))).toBe(false)
        expect(schema(Promise.resolve())).toBe(false)
        // expect(schema(Promise.reject())).toBe(false)
        expect(schema(new Proxy({}, {}))).toBe(false)
    })

    it('should accept number rules and comply', () => {
        const schema = bigint([NumberRules.min(1), NumberRules.max(Number.MAX_SAFE_INTEGER)])

        expect(schema(BigInt(0))).toBe(false)
        expect(schema(BigInt(1))).toBe(true)
        expect(schema(BigInt(2))).toBe(true)
        expect(schema(BigInt(100))).toBe(true)
        expect(schema(BigInt(1_000_000))).toBe(true)
        expect(schema(BigInt(1_000_000_000))).toBe(true)
        expect(schema(BigInt(-1))).toBe(false)
        expect(schema(BigInt(Number.MAX_SAFE_INTEGER))).toBe(true)
        expect(schema(BigInt(Number.MAX_SAFE_INTEGER) + BigInt(1))).toBe(false)
        expect(schema(BigInt(Number.MAX_SAFE_INTEGER) + BigInt(10000000000))).toBe(false)
    })

    it('should have an optional method embeded in the schema', () => {
        expect(bigint).toHaveProperty('optional')
        expect(typeof bigint.optional).toBe('function')

        const schema = bigint.optional()

        expect(typeof schema).toBe('function')
    })

    it('should validate a bigint or undefined when optional schema', () => {
        const schema = bigint.optional()

        expect(schema(BigInt(0))).toBe(true)
        expect(schema(BigInt(1))).toBe(true)
        expect(schema(BigInt(2))).toBe(true)
        expect(schema(BigInt(3))).toBe(true)
        expect(schema(BigInt(4))).toBe(true)
        expect(schema(BigInt(5))).toBe(true)
        expect(schema(BigInt(6))).toBe(true)
        expect(schema(BigInt(7))).toBe(true)
        expect(schema(BigInt(8))).toBe(true)
        expect(schema(BigInt(9))).toBe(true)
        expect(schema(BigInt(10))).toBe(true)
        expect(schema(BigInt(11))).toBe(true)
        expect(schema(BigInt(12))).toBe(true)
        expect(schema(BigInt(13))).toBe(true)
        expect(schema(BigInt(14))).toBe(true)
        expect(schema(BigInt(15))).toBe(true)
        expect(schema(BigInt(16))).toBe(true)
        expect(schema(BigInt(17))).toBe(true)
        expect(schema(BigInt(18))).toBe(true)
        expect(schema(BigInt(19))).toBe(true)
        expect(schema(BigInt(20))).toBe(true)
        expect(schema(BigInt(21))).toBe(true)
        expect(schema(BigInt(22))).toBe(true)
        expect(schema(BigInt(23))).toBe(true)
        expect(schema(BigInt(24))).toBe(true)
        expect(schema(BigInt(25))).toBe(true)
        expect(schema(BigInt(26))).toBe(true)
        expect(schema(BigInt(27))).toBe(true)
        expect(schema(BigInt(28))).toBe(true)
        expect(schema(BigInt(29))).toBe(true)
        expect(schema(BigInt(30))).toBe(true)
        expect(schema(BigInt(31))).toBe(true)
        expect(schema(BigInt(32))).toBe(true)
        expect(schema(BigInt(33))).toBe(true)
        expect(schema(BigInt(34))).toBe(true)
        expect(schema(BigInt(35))).toBe(true)
        expect(schema(BigInt(36))).toBe(true)
        expect(schema(BigInt(37))).toBe(true)
        expect(schema(BigInt(38))).toBe(true)
        expect(schema(BigInt(39))).toBe(true)
        expect(schema(BigInt(40))).toBe(true)
        expect(
            schema(
                BigInt('10000000000000544654654654646547065048465489764808046804860468047840807807')
            )
        ).toBe(true)
        expect(
            schema(
                BigInt('10000000000000544654654654646547065048465489764808046804860468047840807808')
            )
        ).toBe(true)

        expect(schema(0)).toBe(false)
        expect(schema(1)).toBe(false)
        expect(schema('97')).toBe(false)
        expect(schema(true)).toBe(false)
        expect(schema(false)).toBe(false)
        expect(schema(Symbol())).toBe(false)
        expect(schema(null)).toBe(false)
        expect(schema(undefined)).toBe(true) // undefined here
        expect(schema({})).toBe(false)
        expect(schema([])).toBe(false)
        expect(schema(() => void 0)).toBe(false)
        expect(
            schema(function () {
                void 0
            })
        ).toBe(false)
        expect(schema(class {})).toBe(false)
        expect(schema(new Date())).toBe(false)
        expect(schema(/a/)).toBe(false)
        expect(schema(new RegExp('a'))).toBe(false)
        expect(schema(new Error())).toBe(false)
        expect(schema(new Map())).toBe(false)
        expect(schema(new Set())).toBe(false)
        expect(schema(new WeakMap())).toBe(false)
        expect(schema(new WeakSet())).toBe(false)
        expect(schema(new ArrayBuffer(2))).toBe(false)
        expect(schema(new Int8Array())).toBe(false)
        expect(schema(new Uint8Array())).toBe(false)
        expect(schema(new Uint8ClampedArray())).toBe(false)
        expect(schema(new Int16Array())).toBe(false)
        expect(schema(new Uint16Array())).toBe(false)
        expect(schema(new Int32Array())).toBe(false)
        expect(schema(new Uint32Array())).toBe(false)
        expect(schema(new Float32Array())).toBe(false)
        expect(schema(new Float64Array())).toBe(false)
        expect(schema(new BigInt64Array())).toBe(false)
        expect(schema(new BigUint64Array())).toBe(false)
        expect(schema(new Promise(() => void 0))).toBe(false)
        expect(schema(Promise.resolve())).toBe(false)
        expect(schema(new Proxy({}, {}))).toBe(false)
    })

    it('should accept number rules and comply when optional schema', () => {
        const schema = bigint.optional([
            NumberRules.min(1),
            NumberRules.max(Number.MAX_SAFE_INTEGER),
        ])

        expect(schema(BigInt(0))).toBe(false)
        expect(schema(BigInt(1))).toBe(true)
        expect(schema(BigInt(2))).toBe(true)
        expect(schema(BigInt(100))).toBe(true)
        expect(schema(BigInt(1_000_000))).toBe(true)
        expect(schema(BigInt(1_000_000_000))).toBe(true)
        expect(schema(BigInt(-1))).toBe(false)
        expect(schema(BigInt(Number.MAX_SAFE_INTEGER))).toBe(true)
        expect(schema(BigInt(Number.MAX_SAFE_INTEGER) + BigInt(1))).toBe(false)
        expect(schema(BigInt(Number.MAX_SAFE_INTEGER) + BigInt(10000000000))).toBe(false)

        expect(schema(undefined)).toBe(true)
    })
})
